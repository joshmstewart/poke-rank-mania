
export const useBattleStateReturn = (
  stateData: any,
  milestoneHandlers: any,
  handlers: any,
  processingHandlers: any
) => {
  return {
    currentBattle: stateData.currentBattle,
    battleResults: stateData.battleResults,
    battlesCompleted: stateData.battlesCompleted,
    showingMilestone: stateData.showingMilestone,
    setShowingMilestone: stateData.setShowingMilestone,
    selectedGeneration: stateData.selectedGeneration,
    setSelectedGeneration: stateData.setSelectedGeneration,
    completionPercentage: stateData.completionPercentage,
    rankingGenerated: stateData.rankingGenerated,
    selectedPokemon: stateData.selectedPokemon,
    battleType: stateData.battleType,
    setBattleType: stateData.setBattleType,
    finalRankings: stateData.finalRankings,
    confidenceScores: stateData.confidenceScores,
    battleHistory: stateData.battleHistory,
    activeTier: stateData.activeTier,
    setActiveTier: stateData.setActiveTier,
    isBattleTransitioning: stateData.isBattleTransitioning,
    isAnyProcessing: stateData.isAnyProcessing,
    isProcessingResult: stateData.isProcessingResult,
    milestones: stateData.milestones,
    resetMilestones: stateData.resetMilestones,
    calculateCompletionPercentage: milestoneHandlers.calculateCompletionPercentage,
    getSnapshotForMilestone: milestoneHandlers.getSnapshotForMilestone,
    handlePokemonSelect: handlers.handlePokemonSelect,
    handleTripletSelectionComplete: processingHandlers.handleTripletSelectionComplete,
    goBack: handlers.goBack,
    generateRankings: milestoneHandlers.generateRankings,
    handleSaveRankings: milestoneHandlers.handleSaveRankings,
    freezePokemonForTier: milestoneHandlers.freezePokemonForTier,
    isPokemonFrozenForTier: milestoneHandlers.isPokemonFrozenForTier,
    suggestRanking: milestoneHandlers.suggestRanking,
    removeSuggestion: milestoneHandlers.removeSuggestion,
    clearAllSuggestions: milestoneHandlers.clearAllSuggestions,
    handleContinueBattles: milestoneHandlers.handleContinueBattles,
    resetMilestoneInProgress: milestoneHandlers.resetMilestoneInProgress,
    performFullBattleReset: handlers.performFullBattleReset,
    handleManualReorder: handlers.handleManualReorder,
    pendingRefinements: handlers.pendingRefinements,
    refinementBattleCount: handlers.refinementBattleCount,
    clearRefinementQueue: handlers.clearRefinementQueue,
    startNewBattle: handlers.startNewBattleWrapper
  };
};
